#!/bin/bash
# TODO: Reuse common portions in openshift-ovs-subnet and openshift-ovs-multitenant (probably we should handle this when we convert shell scripts to libovsdb APIs)
set -e

lock_file=/var/lock/openshift-sdn.lock

action=$1
pod_namespace=$2
pod_name=$3
net_container=$4
tenant_id=$5

lockwrap() {
    (
    flock 200
    "$@"
    ) 200>${lock_file}
}


Init() {
    true
}

prefix_to_bit_netmask() {
    prefix=$1;
    shift=$(( 32 - prefix ));

    bitmask=""
    for (( i=0; i < 32; i++ )); do
        num=0
        if [ $i -lt $prefix ]; then
            num=1
        fi

        space=
        if [ $(( i % 8 )) -eq 0 ]; then
            space=" ";
        fi

        bitmask="${bitmask}${space}${num}"
    done
    echo $bitmask
}

bit_netmask_to_wildcard_netmask() {
    bitmask=$1;
    wildcard_mask=
    for octet in $bitmask; do
        wildcard_mask="${wildcard_mask} $(( 255 - 2#$octet ))"
    done
    echo $wildcard_mask;
}

get_addresses() {
    net=$(echo $2 | cut -d '/' -f 1);
    prefix=$(echo $2 | cut -d '/' -f 2);

    bit_netmask=$(prefix_to_bit_netmask $prefix);
    wildcard_mask=$(bit_netmask_to_wildcard_netmask "$bit_netmask");

    str=
    for (( i = 1; i <= 4; i++ )); do
        range=$(echo $net | cut -d '.' -f $i)
        mask_octet=$(echo $wildcard_mask | cut -d ' ' -f $i)
        if [ $mask_octet -gt 0 ]; then
            range="{$range..$(( $range | $mask_octet ))}";
        fi
        str="${str} $range"
    done
    ips=$(echo $str | sed "s, ,\\.,g"); ## replace spaces with periods, a join...

    ips_list=($(eval echo $ips))
    ips_len=${#ips_list[@]}

    if [ "$1" = "gateway" ]; then
        echo -n "${ips_list[0]}"
    else
        for (( i = 0; i < $ips_len; i++ )); do
            # Don't print first address (gateway) and last address (brodcast)
            if [ $i -ne 0 -a $i -ne $(( $ips_len - 1 )) ]; then
                echo -n "${ips_list[$i]} "
            fi
        done
    fi
}

acquire_lease() {
    leasefile="/var/run/flannel/networks/${1}.leases"
    ifname=$2
    all_ips=($(get_addresses "list" $3))

    touch $leasefile
    for ip in "${all_ips[@]}"; do
        if ! grep -qx "$ip" $leasefile; then
            # Available address
            echo "${ifname} ${ip}" >> $leasefile
            echo "${ip}"
            return 0
        fi
    done
    echo "NO ADDRESSES AVAILABLE!"
    exit 1
}

find_lease() {
    leasefile="/var/run/flannel/networks/${1}.leases"
    touch $leasefile
    found=$(grep "${2}" $leasefile)
    if [ $? -eq 0 ]; then
        echo ${found} | cut -d ' ' -f 2
    fi
}

release_lease() {
    leasefile="/var/run/flannel/networks/${1}.leases"
    touch $leasefile
    sed -ie "/${2} .*$/d" $leasefile
}

Setup() {
    source /var/run/flannel/networks/${pod_namespace}.env

    pid=$(docker inspect --format "{{.State.Pid}}" ${net_container})
    network_mode=$(docker inspect --format "{{.HostConfig.NetworkMode}}" ${net_container})
    if [ "${network_mode}" == "host" ]; then
      # quit, nothing for the SDN here
      exit 0
    fi

    veth_host=veth$(echo "${net_container}" | cut -c 1-10)
    veth_peer=veth$(echo "${net_container}" | cut -c 55-64)
    ip link add name ${veth_host} type veth peer name ${veth_peer}
    ip link set dev ${veth_host} up
    ip link set dev ${veth_peer} netns ${pid}

    ovs-vsctl add-port br0 ${veth_host} 
    ovs_port=$(ovs-ofctl -O OpenFlow13 dump-ports-desc br0  | grep ${veth_host} | cut -d "(" -f 1 | tr -d ' ')

    nsenter -n -t $pid -- ip link set ${veth_peer} name eth0
    ipaddr=$(acquire_lease ${pod_namespace} ${veth_peer} ${FLANNEL_SUBNET})
    prefix=$(echo ${FLANNEL_SUBNET} | cut -d '/' -f 2);
    nsenter -n -t $pid -- ip addr add ${ipaddr}/${prefix} dev eth0
    nsenter -n -t $pid -- ip link set eth0 up

    gateway=$(get_addresses "gateway" ${FLANNEL_SUBNET})
    nsenter -n -t $pid -- ip route add default via ${gateway} dev eth0

    ovs-ofctl -O OpenFlow13 add-flow br0 "table=3,cookie=0x${ovs_port},priority=100,in_port=${ovs_port},ip,nw_src=${ipaddr},actions=load:${tenant_id}->NXM_NX_REG0[],goto_table:4"
    if [ "${tenant_id}" == "0" ]; then
      ovs-ofctl -O OpenFlow13 add-flow br0 "table=6,cookie=0x${ovs_port},priority=150,ip,nw_dst=${ipaddr},actions=output:${ovs_port}"
    else
      ovs-ofctl -O OpenFlow13 add-flow br0 "table=6,cookie=0x${ovs_port},priority=100,ip,nw_dst=${ipaddr},reg0=${tenant_id},actions=output:${ovs_port}"
    fi

    add_subnet_route="ip route add ${FLANNEL_NETWORK} dev eth0 proto kernel scope link src $ipaddr"
    nsenter -n -t $pid -- $add_subnet_route
}

Teardown() {
    pid=$(docker inspect --format "{{.State.Pid}}" ${net_container})
    network_mode=$(docker inspect --format "{{.HostConfig.NetworkMode}}" ${net_container})
    if [ "${network_mode}" == "host" ]; then
      # quit, nothing for the SDN here
      exit 0
    fi

    veth_peer=veth$(echo "${net_container}" | cut -c 55-64)
    release_lease ${pod_namespace} ${veth_peer}

    veth_host=veth$(echo "${net_container}" | cut -c 1-10)

    ovs_port=$(ovs-ofctl -O OpenFlow13 dump-ports-desc br0  | grep ${veth_host} | cut -d "(" -f 1 | tr -d ' ')
    ovs-vsctl del-port $veth_host
    ovs-ofctl -O OpenFlow13 del-flows br0 "table=3,cookie=0x${ovs_port}/0xffffffff"
    ovs-ofctl -O OpenFlow13 del-flows br0 "table=6,cookie=0x${ovs_port}/0xffffffff"

    ip link del ${veth_host}
}

Status() {
    veth_peer=veth$(echo "${net_container}" | cut -c 55-64)
    ipaddr=$(find_lease ${pod_namespace} ${veth_peer})
    printf "{ \"kind\": \"PodNetworkStatus\", \"apiVersion\": \"v1beta1\", \"ip\": \"${ipaddr}\" }\n"
}

case "$action" in
    init)
	lockwrap Init
	;;
    setup)
	set -x
	lockwrap Setup
	;;
    teardown)
	set -x
	lockwrap Teardown
	;;
    status)
	lockwrap Status
	;;
    *)
        echo "Bad input: $@"
        exit 1
esac

